{
	"name": "Move data to dataflow parquet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "adlseventhubdata",
						"type": "LinkedServiceReference"
					},
					"name": "sourceAvro"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "parquetds",
						"type": "DatasetReference"
					},
					"name": "sinktoparquet"
				}
			],
			"transformations": [
				{
					"name": "castBodytoString"
				},
				{
					"name": "select1"
				},
				{
					"name": "parseBodytoJson"
				},
				{
					"name": "addColumnsFromJson"
				},
				{
					"name": "selectOnlyJson"
				}
			],
			"scriptLines": [
				"parameters{",
				"     container as string,",
				"     file as string,",
				"     folder as string",
				"}",
				"source(output(",
				"          SequenceNumber as long,",
				"          Offset as string,",
				"          EnqueuedTimeUtc as string,",
				"          SystemProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Properties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Body as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'avro',",
				"     fileSystem: ($container),",
				"     folderPath: ($folder),",
				"     fileName: ($file)) ~> sourceAvro",
				"select1 cast(output(",
				"          Body as string",
				"     ),",
				"     errors: true) ~> castBodytoString",
				"sourceAvro select(mapColumn(",
				"          SequenceNumber,",
				"          Offset,",
				"          EnqueuedTimeUtc,",
				"          Body",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"castBodytoString parse(jsonBody = Body ? (CustomerID as integer,",
				"          PersonID as integer,",
				"          StoreID as string,",
				"          TerritoryID as string,",
				"          AccountNumber as string,",
				"          rowguid as string,",
				"          ModifiedDate as string),",
				"     format: 'json',",
				"     documentForm: 'arrayOfDocuments') ~> parseBodytoJson",
				"selectOnlyJson derive(each(jsonBody, match(true()), $$ = $$)) ~> addColumnsFromJson",
				"parseBodytoJson select(mapColumn(",
				"          jsonBody",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOnlyJson",
				"addColumnsFromJson sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          each(match(type == 'string' || type == 'integer'))",
				"     )) ~> sinktoparquet"
			]
		}
	}
}